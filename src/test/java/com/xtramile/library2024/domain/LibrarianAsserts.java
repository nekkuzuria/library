package com.xtramile.library2024.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LibrarianAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLibrarianAllPropertiesEquals(Librarian expected, Librarian actual) {
        assertLibrarianAutoGeneratedPropertiesEquals(expected, actual);
        assertLibrarianAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLibrarianAllUpdatablePropertiesEquals(Librarian expected, Librarian actual) {
        assertLibrarianUpdatableFieldsEquals(expected, actual);
        assertLibrarianUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLibrarianAutoGeneratedPropertiesEquals(Librarian expected, Librarian actual) {
        assertThat(expected)
            .as("Verify Librarian auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLibrarianUpdatableFieldsEquals(Librarian expected, Librarian actual) {
        assertThat(expected)
            .as("Verify Librarian relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getDateOfBirth()).as("check dateOfBirth").isEqualTo(actual.getDateOfBirth()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLibrarianUpdatableRelationshipsEquals(Librarian expected, Librarian actual) {
        assertThat(expected)
            .as("Verify Librarian relationships")
            .satisfies(e -> assertThat(e.getLibrary()).as("check library").isEqualTo(actual.getLibrary()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()));
    }
}
