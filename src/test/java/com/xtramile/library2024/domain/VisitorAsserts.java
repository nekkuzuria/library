package com.xtramile.library2024.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VisitorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVisitorAllPropertiesEquals(Visitor expected, Visitor actual) {
        assertVisitorAutoGeneratedPropertiesEquals(expected, actual);
        assertVisitorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVisitorAllUpdatablePropertiesEquals(Visitor expected, Visitor actual) {
        assertVisitorUpdatableFieldsEquals(expected, actual);
        assertVisitorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVisitorAutoGeneratedPropertiesEquals(Visitor expected, Visitor actual) {
        assertThat(expected)
            .as("Verify Visitor auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVisitorUpdatableFieldsEquals(Visitor expected, Visitor actual) {
        assertThat(expected)
            .as("Verify Visitor relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getDateOfBirth()).as("check dateOfBirth").isEqualTo(actual.getDateOfBirth()))
            .satisfies(e -> assertThat(e.getMembershipStatus()).as("check membershipStatus").isEqualTo(actual.getMembershipStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVisitorUpdatableRelationshipsEquals(Visitor expected, Visitor actual) {
        assertThat(expected)
            .as("Verify Visitor relationships")
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getLibrary()).as("check library").isEqualTo(actual.getLibrary()));
    }
}
